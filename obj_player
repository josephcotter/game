//OBJECT CREATION
//initialize vars
hspd = 0;
vspd = 0;
grav = .3;
movespeed = 5;
jumpspeed = 5;
attack = 0;
justattacked = 0;
hurt = 0;
justhurt = 0;
facing = 1
ground = 0;
crouching = 0;
donesliding = 0;
dashing = 0;
attacking = 0;
regattack = 0;
crouchattack = 0;
downthrust = 0;
bounce = 0;
hearts = 6;
dead = 0;

//STEP EVENT
ground = place_meeting(x, y+1, obj_room);

//movement calculations
oldhspd = hspd;
oldvspd = vspd;
    
if (!dead)
{
    //getting input and setting step variables
    right = keyboard_check(vk_right);
    left = -keyboard_check(vk_left);
    crouch = keyboard_check(vk_down);
    up = keyboard_check(vk_up);
    jump = keyboard_check_pressed(ord('Z'));
    jump_held = keyboard_check(ord('Z'));
    attack = keyboard_check_pressed(ord('X'));
    attack_held = keyboard_check(ord('X'));
    backdash = keyboard_check_pressed(vk_space);
    behind = 0;
    infront = 0;
    
    //getting input
    if(!hurt) // don't accept input if hurt
    {
        move = right + left;
        hspd = move*movespeed;
    }
    
    
    //downthrust special check -- downthrusting is a special attack, it can be held while in air
    if (downthrust && (ground || !attack_held)) //if downthrusting and back on ground, or no longer holding attack, end attack
    {
        attacking = 0;
        downthrust = 0;
        bounce = 0;
        with(obj_player_sword)
            instance_destroy();
        alarm [1] = 8; //cannot attack for another 8 frames
    }

        
    //standing back up
    if(sprite_index != spr_player)// if player isn't already standing, perform stand up routine (kek)
    {
        if (ground && !attacking && !hurt && !crouching && !dashing) //if ur on the ground and not doing anything
        {   
            if(sprite_index == spr_player_crouch) //if crouch sprite is active and crouch is not being pressed, check if player has room to stand
            {    
                if(!crouch && !place_meeting (x, y - 16, obj_room)) //sprite only changes if we no longer want to crouch and there is room to stand 
                {
                    sprite_index = spr_player;
                    donesliding = 0; //reset for next sliding crouch
                }
            }
            else
                sprite_index = spr_player;

            ground = place_meeting(x, y+1, obj_room); //for clean sprite transition from crouching to falling                 
        }
    }
    
    //looking up
    if(up && sprite_index == spr_player)//look up if standing
        sprite_index = spr_player_lookup;
    
    crouching = 0; //crouching is reset every step to ensure it accurately reflects current state
    
    //jumping
    if (ground && !attacking && !hurt && !dashing) //jump if on ground, not attacking, not hurt, not dashing
    {
        if(jump)
        {
        ground = 0; //for clean sprite transitions
        donesliding = 0;
        vspd = jump*-jumpspeed;
        }
    }
    
    else if (hspd != oldhspd) //if horizontal velocity is changing in air 
        hspd = hspd/2; //can only slightly alter horizontal speed in air       
        
    if (vspd < 0 && !jump_held && !hurt && !bounce) //variable jump height -- if moving up, not hurt, not bouncing, and jump is not being held, then reduce vertical speed to 1 Don't do this if you bounce on a downthrust
        vspd = max (vspd, -1);
               
    //jumping animation 
    if (vspd != 0 && !attacking && !hurt)
    {   
        if (vspd < 0) //if moving up use up sprite and visa versa
        {    
            if(ground)
            {
                      if(!crouch && !place_meeting (x, y - 16, obj_room)) //sprite only changes if we no longer want to crouch and there is room to stand 
                      {
                        sprite_index = spr_player_up;
                        hspd = hspd/2; //if ur jumping up over a block and as you go over the edge u touch the ground for a sec u could get a speed boost without this line
                      }        
            }
            else if (!place_meeting (x, y - 16, obj_room))
                sprite_index = spr_player_up;
        }
        else if (sprite_index == spr_player_crouch) // if sliding off cliff, falling animation starts lower - avoids getting stuck in weird spots and looks better. spr_crouch height = 29 center = 32 spr_down height = 44 center = 32. in order to clear blocks of height 32, we need  to move > 11 pixels down. 44 - 32 = 12
        {
            y = y+12;
            sprite_index = spr_player_down;
        }
        else 
            sprite_index = spr_player_down; 
        
    }
        
    //crouching
    //adjusting crouching near walls (crouch sprite is almost triple the width of standing sprite)
    if (crouch && ground && (sprite_index == spr_player || sprite_index == spr_player_down))  //if we are trying to crouch and all conditions to set sprite player above are true
    {   
        infront = place_meeting(x+15, y, obj_room); 
        behind = place_meeting(x-15, y, obj_room);
        
        if(behind && !infront)
            x += 15;
        else if (infront && !behind)
            x -= 15;
        else if (infront && behind)
            crouch = 0; //cant crouch if there isn't 15 pixels of clearance on either side ( spr_player width = 16 spr_player_crouch = 46 23-8 = 15 )
    }
    
    if (crouch && ground && !hurt && !attacking) //able to crouch if on ground and not hurt or attacking
    {
            sprite_index = spr_player_crouch;
            crouching = 1;         
            if(infront && !place_meeting(x+32, y, obj_room)) //means we crouched *into* a tunnel -- reverse adjustment
                x += 15;
            else if(behind && !place_meeting(x-32, y, obj_room))
                x -= 15;
    }
    
    //backdash
    if(dashing && oldhspd == 0) //means dash has ended
    {    
        dashing = 0;
        if(!crouch)
            sprite_index = spr_player; // smooth sprite transition when backdashing into turning   
    }
        
    if(backdash && ground && !hurt && !dashing && !crouching && !attacking)
    {
        if(!place_meeting(x-facing, y, obj_room)) //if back is not already against a wall    
        {
            dashing = 1;
            oldhspd = -facing*4 //use oldhspd so sliding friction function works
            sprite_index = spr_player_backdash;
        }
    }
    
    //friction - ONLY FOR BACKDASHING AND CROUCH SLIDING
    if(!donesliding && (crouchattack || sprite_index == spr_player_crouch || dashing)) //if not donesliding and in any offensive crouch position or dashing, apply friction
    {
        if (oldhspd != 0) //if oldhspd = 0 then initial slide has ended. if abs(oldhspd) = 2 then we are scooting
        {
            if(dashing)
                hspd = oldhspd - sign(oldhspd)*.2; //slow down a lot faster if dashing. lose .2 speed each frame
            else
                hspd = oldhspd - sign(oldhspd)*.05; //friction is less when sliding
           
        }
        else 
            donesliding = 1; //means initial slide, if there ever was one, is now over. or u are trying to slide from a standstill. in these situations, you can scoot slowly
    }
    //scooting 
    if ((donesliding || oldhspd == 0) && (sprite_index == spr_player_crouch || crouchattack)) //if donesliding or never was sliding and if in crouch position (even if unwilling), move 1 pixel/frame
        hspd = move;
    
    //attacking
    if (attack && !hurt && !justattacked) //cant attack when hurt or just after attacking
    {
            dashing = 0;//new 
            attacking = 1;
            justattacked = 1;
            with instance_create(x, y, obj_player_sword) //creating sword
            {
                master = other.id; // player is sword's master
                image_xscale = master.image_xscale;
            }
            if(sprite_index != spr_player_crouch)
            {   
                regattack = 1;
                if(!up && !crouch) //if not up attack
                {
                    if (place_meeting(x + facing*8, y, obj_room))//if attacking against wall, move away so as not to get stuck. spr_player width = 16 center = 8 spr_attack width = 16 center = 0. 16 - 0 - 8 = 8
                        x -= facing*8;
                    sprite_index = spr_player_attack;
                }
                else if (!crouch) //not doing down air, but holding up
                {
                    sprite_index = spr_player_attack_up;
                    with(obj_player_sword)
                        sprite_index = spr_player_attack_up_sword;
                } 
                else if(!ground) //in air, holding crouch and trying to attack. downthrust bounce is handled in baddy collisions
                {
                    downthrust = 1;
                    sprite_index = spr_player_attack_down;
                    with(obj_player_sword)
                        sprite_index = spr_player_attack_down_sword;
                }
                
            }
            else //crouch attack if crouch sprite is active
            {
                crouchattack = 1;
                sprite_index = spr_player_crouch_attack;
                with (obj_player_sword) //changing sword obj sprite so its hit mask is in the correct place
                    sprite_index = spr_player_crouch_attack_sword;
            }
            
            if (!downthrust) // can downthrust as long as in air and holding x, unlike the other attacks
                alarm[0] = 8;
    }
    
    if(attacking && ground && !crouchattack) // cant move horizontally while attacking unless in air or sliding
            hspd = 0;
         
    //SPRITE MIRRORING
    if (!hurt && !attacking && !dashing && move != 0)//mirror sprite if not hurt, attacking, dashing, or standing still
    {
    
        if (image_xscale != move) //if image scale = move the sprite is already oriented correctly
        {   
            image_xscale = move;  
            x -= move; //avoid getting stuck in walls in weird situations -- not sure why this happens, as all sprites are width centered and movement is not applied yet
        }
    }
    facing = image_xscale; 
}

//hurt slide
if ((hurt || dead) && ground && hspd!= 0) //slow down if hurt and on the ground (like if you got hit up onto a platform or hit while in forced crouch)
    hspd -= sign(oldhspd) * .1;

//DYING
if(!hurt && ground && dead == 1) //lay down when u hit the ground. dead is 1 so this only happens once and sprite can change during alarm 4
{
    infront = place_meeting(x+32, y, obj_room); 
    behind = place_meeting(x-32, y, obj_room);
        
    if(behind && !infront)
        x += 24;
    else if (infront && !behind)
        x -= 24;
    dead = 2;        
    sprite_index = spr_player_halfdead;
    alarm[4] = 30;        
}    

//gravity
if (vspd < 12 && !ground) //12 is terminal velocity
    vspd += grav;
 
//VERTICAL COLLISION DETECTION
if (place_meeting(x, y + vspd, obj_room))
{
    while(!place_meeting(x, y + sign(vspd), obj_room) && oldvspd > 0)
        y += sign(vspd);
        
    vspd = 0;
}

y += vspd;
   
//HORIZONTAL COLLISION DETECTION
if (place_meeting(x + hspd, y, obj_room)) 
{
    while(!place_meeting(x + sign(hspd), y, obj_room))
        x += sign(hspd);
    
    hspd = 0;
}

x += hspd;

cameramove(); //camera script -- follows player. also handles stats through background manipulation

//ALARM 0
//restoring sprite
if(!hurt) //if hurt, then sprite has already changed
{
    if (crouchattack)
    {
        sprite_index = spr_player_crouch;
    }
    else
    {
        sprite_index = spr_player;
        
    }
}
with (obj_player_sword)
{
    instance_destroy(); //destroying sword object
}
attacking = 0;
regattack = 0;
crouchattack = 0;
downthrust = 0;
alarm [1] = 8; //cannot attack for another 8 frames

//ALARM 1
justattacked = 0;

//ALARM 2
//restoring sprite
if(!place_meeting (x, y - 16, obj_room)) 
    sprite_index = spr_player;
else
    sprite_index = spr_player_crouch;
hurt = 0;
alarm[3] = 12;

//ALARM 3
justhurt = 0;

//ALARM 4
sprite_index = spr_player_dead;
alarm[5] = 90;

//ALARM 5
room_restart();

