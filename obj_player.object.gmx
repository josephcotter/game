<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initialize vars
hspd = 0;
vspd = 0;
grav = .2;
movespeed = 5;
jumpspeed = 4;
attack = 0;
justattacked = 0;
hurt = 0;
justhurt = 0;
facing = 1
ground = 0;
crouching = 0;
regattack = 0;
crouchattack = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>justhurt = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!place_meeting (x, y - 16, obj_room))
    sprite_index = spr_player;
else
    sprite_index = spr_player_crouch;
hurt = 0;
alarm[3] = 12;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>justattacked = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!hurt)
{
    if (crouchattack)
    {
        sprite_index = spr_player_crouch;
    }
    else
    {
        sprite_index = spr_player;
        
    }
}
attack = 0;
regattack = 0;
crouchattack = 0;
alarm [1] = 8; //cannot attack for another 8 frames
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//getting input and setting step variables
right = keyboard_check(vk_right);
left = -keyboard_check(vk_left);
crouch = keyboard_check(vk_down);
jump = keyboard_check_pressed(ord('Z'));
jump_held = keyboard_check(ord('Z'));
ground = place_meeting(x, y+1, obj_room);
behind = 0;
infront = 0;


//movement calculations
oldhspd = hspd;
oldvspd = vspd;

//gravity
if (vspd &lt; 12 &amp;&amp; !ground) //12 is terminal velocity
    vspd += grav;

//getting input
if(!hurt) // don't accept input if hurt
{
    move = right + left;
    hspd = move*movespeed; 
}
//standing back up
if (ground &amp;&amp; !attack &amp;&amp; !hurt &amp;&amp; !crouching &amp;&amp; !place_meeting (x, y - 16, obj_room)) //dont stand if there is not room to do so
{   
            sprite_index = spr_player;      
}

    crouching = 0;

//JUMPING
if (ground &amp;&amp; !attack &amp;&amp; !hurt) //jump if on ground, not attacking, not hurt
    vspd = jump*-jumpspeed;
else if (hspd != oldhspd) //if changing directions during a jump
    hspd = hspd/2; //can only slightly alter horizontal speed in the air 
        
if (vspd &lt; 0 &amp;&amp; !jump_held &amp;&amp; !hurt) //variable jump height -- if moving up, not hurt, and jump is being held, then reduce vertical speed to 1
    vspd = max (vspd, -1);
    
    
//jumping animation
if (!ground &amp;&amp; !attack &amp;&amp; !hurt)
{   
    if (vspd &lt; 0) //if moving up use up sprite and visa versa
        sprite_index = spr_player_up;
    else if (sprite_index == spr_player_crouch) // if sliding off cliff, falling animation starts lower - avoids getting stuck in weird spots and looks better
    {
        y = y+10;
        sprite_index = spr_player_down;
    }
    else
        sprite_index = spr_player_down;   
    while (place_meeting(x, y, obj_room))
        x -= facing;
}
    


//CROUCHING
//adjusting crouching near walls (crouch sprite is almost triple the width of standing sprite)
if (crouch &amp;&amp; sprite_index == spr_player) 
{
    
    infront = place_meeting(x+32, y, obj_room); 
    behind = place_meeting(x-32, y, obj_room);
    
    if(behind &amp;&amp; !infront)
        x += 15;
    else if (infront &amp;&amp; !behind)
        x -= 15;
    else if (infront &amp;&amp; behind)
        crouch = 0; //cant crouch if there isn't 15 pixels of clearance on either side ( spr_player width = 16 spr_player_crouch = 46 23-8 = 15
}

//crouching and sliding crouch
if (crouch &amp;&amp; ground &amp;&amp; !hurt &amp;&amp; !attack) //able to crouch if on ground and not hurt or attacking
{
        sprite_index = spr_player_crouch;
        crouching = 1; //crouching means a successful crouch has just occurred. crouch means that a crouch has just been requested
        
        if (oldhspd != 0 &amp;&amp; abs(oldhspd) != 2) //if oldhspd = 0 then initial slide has ended. if abs(oldhspd) = 2 then we are scooting
            hspd = oldhspd;
        else 
            hspd = move*2;         
}

if (!crouch &amp;&amp; sprite_index == spr_player_crouch) //if stopped crouching under a block, you can move slowly 
    hspd = move*2;
       

//ATTACKING
if (!hurt &amp;&amp; !justattacked) //cant attack when hurt or just after attacking
{
    if (keyboard_check_pressed(ord('X')))
    {
        attack = 1;
        justattacked = 1;
        with instance_create(x, y, obj_player_sword) //creating sword
        master = other.id; // player is sword's master
        
        if(sprite_index != spr_player_crouch)
        {   
            regattack = 1;
            sprite_index = spr_player_attack; 
            if (place_meeting(x + facing*22, y, obj_room))//if attacking against wall, move away so as not to get stuck
                x += -facing*22;
        }
        else
        {
            crouchattack = 1;
            sprite_index = spr_player_crouch_attack;
            with (obj_player_sword)
            {
                sprite_index = spr_player_crouch_attack_sword;
            }
        }
        
        alarm[0] = 8;
    }
}

if(attack &amp;&amp; ground &amp;&amp; !crouchattack) // cant move horizontally while attacking unless in air or sliding
        hspd = 0;
    
if (hurt &amp;&amp; ground &amp;&amp; hspd!= 0) //slow down if hurt and on the ground (got hit up onto a platform or hit while in forced crouch)
    hspd -= sign(oldhspd) * .1;     
  


//SPRITE MIRRORING
    if (!hurt &amp;&amp; !attack &amp;&amp; move!= 0)//mirror sprite if not hurt, attacking, or standing still
    {

            if (image_xscale != move) //if image scale = move the sprite is already oriented correctly
            {   
                image_xscale = move;
                //x += move*12;   //adjust for turning radius
                facing = image_xscale; 
            }
    }
 
//VERTICAL COLLISION DETECTION
if (place_meeting(x, y + vspd, obj_room))
{
    while(!place_meeting(x, y + sign(vspd), obj_room) &amp;&amp; oldvspd &gt; 0)
        y += sign(vspd);
        
    vspd = 0;
}

y += vspd;
   
//HORIZONTAL COLLISION DETECTION
if (place_meeting(x + hspd, y, obj_room)) 
{
    while(!place_meeting(x + sign(hspd), y, obj_room))
        x += sign(hspd);
    
    hspd = 0;
}

x += hspd;



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
